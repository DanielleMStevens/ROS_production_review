geom_line() +
my_ggplot_theme
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[5,3],30))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[6,3],30))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[7,3],30))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[3,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[4,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[5,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[6,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[7,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],50))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],100))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],15))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],20))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[9,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
print(paste(refernce_seq_window, test_seq_window, sep = "_"))
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window)
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
print(paste(refernce_seq_window, test_seq_window, sep = "_"))
print(alignment_match)
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window, type = 'global-local')
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
print(paste(refernce_seq_window, test_seq_window, sep = "_"))
print(alignment_match)
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window, type = 'global-local')
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
print(paste(refernce_seq_window, test_seq_window, sep = "_"))
print(alignment_match)
print(pid(alignment_match))
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window, type = 'global-local')
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
#print(paste(refernce_seq_window, test_seq_window, sep = "_"))
#print(alignment_match)
#print(pid(alignment_match))
hold_scores[[j]] <- pid(alignment_match)
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[8,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
save
str(save)
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line()
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,1)
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[9,3],25))
colnames(save) <- c("similarity")
ggplot(save, aes(x = as.numeric(rownames(save)), y = similarity)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
rm(hold_data)
colnames(save)
similarity
# plot data
ggplot(melt_hold_local_global_Scores, aes(x = variable, y = value)) +
geom_boxplot(fill = "grey60", alpha = 0.6, outlier.alpha = 0) +
geom_jitter(fill = "black", alpha = 0.4, width = 0.2) +
my_ggplot_theme +
ylab("Percent Similarity\n") +
#ylim(40,80) +
xlab("")
spread(save)
library(tidyr)
spread(save)
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[9,3],25))
spread(save)
colnames(save) <- c("similarity")
spread(save, key = rownames(save), value = similarity)
sav
save
nchar(reference_AtRBOHD)
hholdBlast_hits[2,2]
holdBlast_hits
holdBlast_hits[2,2]
#average_data <- as.data.frame(colMeans(hold_data[,500:1000]))
hold_data <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],25))
colnames(hold_data) <- holdBlast_hits[2,2]
hold_data
for (i in 3:nrow(holdBlast_hits)){
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[i,3],25))
colnames(save) <- holdBlast_hits[i,2]
hold_data <- cbind(hold_data, save)
}
hold_data
hold_data_melt <- melt(hold_data)
hold_data_melt
ggplot(hold_data_melt, aes(x = as.numeric(rownames(save)), y = value)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = as.numeric(rownames(hold_data_melt)), y = value)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
hold_data
hold_data_melt <- melt(hold_data)
hold_data_melt <- melt(hold_data, id = rownames(hold_data))
as.numeric(rownames(hold_data))
hold_data <- cbind(as.numeric(rownames(hold_data)), hold_data)
head(hold_data)
hold_data_melt <- melt(hold_data)
head(hold_data_melt)
hold_data_melt <- melt(hold_data)
head(hold_data_melt)
#average_data <- as.data.frame(colMeans(hold_data[,500:1000]))
hold_data <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],25))
hold_data <- cbind(as.numeric(rownames(hold_data)), hold_data)
hold_data
pb = txtProgressBar(min = 0, max = nrow(holdBlast_hits), initial = 0, style = 3)
for (i in 3:nrow(holdBlast_hits)){
save <- data.frame(calculate_sim_scan_score(holdBlast_hits[i,3],25))
colnames(save) <- holdBlast_hits[i,2]
hold_data <- cbind(hold_data, save)
setTxtProgressBar(pb, i)
}
hold_data
colnames(hold_data$`as.numeric(rownames(hold_data))`) <- c("Positions")
colnames(hold_data)[1] <- c("Positions")
hold_data
hold_data$calculate_sim_scan_score.holdBlast_hits.2..3...25.
hold_data$`lcl|Query_35925:707-933 Aqcoe5G319800.1_Hypotehtical_AcRBOH_Aquilegia_coerulea`
hold_data_melt <- melt(hold_data, id = c("Positions"))
hold_data_melt
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_smooth() +
my_ggplot_theme +
ylim(0,100)
rowMeans(hold_data)
#hold_data_melt <- melt(hold_data, id = c("Positions"))
test <- data.frame(rowMeans(hold_data))
test
ggplot(test, aes(x = as.numeric(rownames(test)), y = rowMeans.hold_data.)) +
geom_smooth() +
my_ggplot_theme +
ylim(0,100)
ggplot(test, aes(x = as.numeric(rownames(test)), y = rowMeans.hold_data.)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
my_ggplot_theme +
ylim(0,100)
ggplot(test, aes(x = as.numeric(rownames(test)), y = rowMeans.hold_data.)) +
geom_line() +
geom_point(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
hold_data_melt
ggplot(test, hold_data_melt(x = Positions, y = value)) +
geom_point(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
hold_data_melt <- melt(hold_data, id = c("Positions"))
ggplot(test, hold_data_melt(x = Positions, y = value)) +
geom_point(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_scatter(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_jitter(fill = "black", alpha = 0.1) +
my_ggplot_theme +
ylim(0,100)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_jitter(fill = "grey", alpha = 0.05) +
my_ggplot_theme +
ylim(0,100)
my_ggplot_theme +
ylim(0,100)
ggplot(test, aes(x = as.numeric(rownames(test)), y = rowMeans.hold_data.)) +
geom_line() +
geom_point(fill = "black", alpha = 0.3) +
my_ggplot_theme +
ylim(0,100)
View(hold_data)
save23 <- ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.02) +
my_ggplot_theme +
ylim(0,100)
save23 + ggplot(test, aes(x = as.numeric(rownames(test)), y = rowMeans.hold_data.)) +
geom_line() +
my_ggplot_theme +
ylim(0,100)
save23 <- ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.02) +
my_ggplot_theme +
ylim(0,100) +
stat_summary(aes(y= value), fun.y = mean, colour="red", geom="line")
save23 <- ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.02) +
my_ggplot_theme +
ylim(0,100) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line")
save23
save23 <- ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.01) +
my_ggplot_theme +
ylim(0,100) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line", width = 1)
save23 <- ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.01) +
my_ggplot_theme +
ylim(0,100) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line", size = 1)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.01) +
my_ggplot_theme +
ylim(0,100) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line", size = 1)
AtRBODH_Cterm_highlight_region[1,50]
substr(AtRBODH_Cterm_highlight_region,1,5)
substr(AtRBODH_Cterm_highlight_region,1,6)
substr(AtRBODH_Cterm_highlight_region,1,7)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.01) +
my_ggplot_theme +
ylim(0,100) +
xlim(0,7) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line", size = 1)
ggplot(hold_data_melt, aes(x = Positions, y = value)) +
geom_point(alpha = 0.01, color = 'grey') +
my_ggplot_theme +
ylim(0,100) +
xlim(150,180) +
stat_summary(aes(y= value), fun = mean, colour="red", geom="line", size = 1)
AtRBODH_Cterm_highlight_region <- substr(reference_AtRBOHD,680,1000)
AtRBODH_Cterm_highlight_region
reticulate::repl_python()
holdBlast_hits <- Biostrings::readAAStringSet(filepath = file.choose(), format = 'fasta') #c-term-hits.fasta
holdBlast_hits <- Biostrings::readAAStringSet(filepath = file.choose(), format = 'fasta') #c-term-hits.fasta
holdBlast_hits <- dss2df(holdBlast_hits)
rownames(holdBlast_hits) <- NULL
holdBlast_hits <- Biostrings::readAAStringSet(filepath = file.choose(), format = 'fasta') #c-term-hits.fasta
holdBlast_hits <- dss2df(holdBlast_hits)
rownames(holdBlast_hits) <- NULL
hold_local_global_Scores <- data.frame("Full Length RBOHD" = as.numeric(), "RBOHD C-terminus" = as.numeric())
for (i in 1:nrow(holdSeq2)){
find_blast_hit_seq <- holdBlast_hits[grepl(holdSeq2[i,2], holdBlast_hits$names),]
if (nrow(find_blast_hit_seq) == 0){
next
}
if (nrow(find_blast_hit_seq) == 1){
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], find_blast_hit_seq[,3]))
}
if (nrow(find_blast_hit_seq) >= 2){
#next
longest <- max(nchar(find_blast_hit_seq$seq))
holdseq <- find_blast_hit_seq[which(nchar(find_blast_hit_seq$seq) == longest),3]
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], holdseq))
}
}
hold_local_global_Scores <- data.frame("Full Length RBOHD" = as.numeric(), "RBOHD C-terminus" = as.numeric())
for (i in 1:nrow(holdSeq2)){
find_blast_hit_seq <- holdBlast_hits[grepl(holdSeq2[i,2], holdBlast_hits$names),]
if (nrow(find_blast_hit_seq) == 0){
next
}
if (nrow(find_blast_hit_seq) == 1){
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], find_blast_hit_seq[,3]))
}
if (nrow(find_blast_hit_seq) >= 2){
#next
longest <- max(nchar(find_blast_hit_seq$seq))
holdseq <- find_blast_hit_seq[which(nchar(find_blast_hit_seq$seq) == longest),3]
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], holdseq))
}
}
calculate_sim_score <- function(full_sequence_in, blast_hit_in){
seq_global <- Biostrings::pairwiseAlignment(reference_AtRBOHD, full_sequence_in, type = 'global', substitutionMatrix = "BLOSUM62")
seq_local <- Biostrings::pairwiseAlignment(AtRBODH_Cterm_highlight_region, blast_hit_in, type = 'global', substitutionMatrix = "BLOSUM62")
my_list <- data.frame("Full Length RBOHD" = pid(seq_global, "PID1"), "RBOHD C-terminus" = pid(seq_local, "PID1"))
return(my_list)
}
if (nrow(find_blast_hit_seq) >= 2){
#next
longest <- max(nchar(find_blast_hit_seq$seq))
holdseq <- find_blast_hit_seq[which(nchar(find_blast_hit_seq$seq) == longest),3]
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], holdseq))
}
for (i in 1:nrow(holdSeq2)){
find_blast_hit_seq <- holdBlast_hits[grepl(holdSeq2[i,2], holdBlast_hits$names),]
if (nrow(find_blast_hit_seq) == 0){
next
}
if (nrow(find_blast_hit_seq) == 1){
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], find_blast_hit_seq[,3]))
}
if (nrow(find_blast_hit_seq) >= 2){
#next
longest <- max(nchar(find_blast_hit_seq$seq))
holdseq <- find_blast_hit_seq[which(nchar(find_blast_hit_seq$seq) == longest),3]
hold_local_global_Scores <- rbind(hold_local_global_Scores, calculate_sim_score(holdSeq2[i,3], holdseq))
}
}
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window, type = 'global-local')
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
#print(paste(refernce_seq_window, test_seq_window, sep = "_"))
#print(alignment_match)
#print(pid(alignment_match))
hold_scores[[j]] <- pid(alignment_match)
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
hold_data <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],20))
hold_data <- cbind(as.numeric(rownames(hold_data)), hold_data)
hold_data
holdBlast_hits
hold_data <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],20))
hold_data
calculate_sim_scan_score <- function(sequence_in, window_size){
hold_scores <- list()
for (j in 1:nchar(holdBlast_hits[1,3])){
if((j + window_size) <= nchar(holdBlast_hits[1,3])){
refernce_seq_window <- substr(holdBlast_hits[1,3], j, (j + window_size))
test_seq_window <- substr(sequence_in, j, (j + window_size))
alignment_match <- pairwiseAlignment(refernce_seq_window, test_seq_window, type = 'global-local')
#hold_scores[[j]] <- levenshteinSim(refernce_seq_window, test_seq_window)
#print(paste(refernce_seq_window, test_seq_window, sep = "_"))
print(alignment_match)
#print(pid(alignment_match))
hold_scores[[j]] <- pid(alignment_match)
}
}
hold_scores <- unlist(hold_scores)
return(hold_scores)
}
hold_data <- data.frame(calculate_sim_scan_score(holdBlast_hits[2,3],20))
holdBlast_hits
reticulate::repl_python()
